import React, { useState, useRef, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { Link, useNavigate } from 'react-router-dom';
import { setUser } from '../app/slices/authSlice';
import toast from 'react-hot-toast';
import { CiLight, CiDark, CiMenuBurger } from 'react-icons/ci';
import { FaShoppingCart, FaSearch, FaTrash, FaChevronDown, FaChevronUp, FaHeart, FaUser, FaSignOutAlt, FaHome, FaBox, FaList, FaTruck } from 'react-icons/fa';
import { removeFromCart } from '../app/slices/cartSlice';
import apiRequest from '../utils/api';

const Navbar = ({ isDarkMode, setIsDarkMode }) => {
  const user = useSelector((state) => state.auth.user);
  const cart = useSelector((state) => state.cart.cart);
  const [isOpen, setIsOpen] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [isSearchFocused, setIsSearchFocused] = useState(false);
  const [showMiniCart, setShowMiniCart] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState("All");
  const [showCategories, setShowCategories] = useState(false);
  const [activeNavItem, setActiveNavItem] = useState(null);
  const miniCartRef = useRef(null);
  const categoryRef = useRef(null);
  const navigate = useNavigate();
  const dispatch = useDispatch();

  // Categories for dropdown with icons
  const categories = [
    { name: "All", icon: <FaList /> },
    { name: "Electronics", icon: <FaBox /> },
    { name: "Jewelry", icon: <FaBox /> },
    { name: "Men's Clothing", icon: <FaBox /> },
    { name: "Women's Clothing", icon: <FaBox /> },
    { name: "Stationery", icon: <FaBox /> },
    { name: "Grocery", icon: <FaBox /> }
  ];

  // Calculate cart total
  const cartTotal = cart ? cart.reduce((total, item) => total + (item.price * item.quantity), 0) : 0;

  // Handle outside click for mini cart
  useEffect(() => {
    function handleClickOutside(event) {
      if (miniCartRef.current && !miniCartRef.current.contains(event.target)) {
        setShowMiniCart(false);
      }
      if (categoryRef.current && !categoryRef.current.contains(event.target)) {
        setShowCategories(false);
      }
    }
    
    document.addEventListener("mousedown", handleClickOutside);
    return () => {
      document.removeEventListener("mousedown", handleClickOutside);
    };
  }, [miniCartRef, categoryRef]);

  const handleLogout = async () => {
    try {
      const data = await apiRequest(`http://localhost:3000/api/auth/logout`, {
        method: 'GET'
      });
      
      if (data.success) {
        dispatch(setUser(null));
        toast.success(data.message);
        navigate('/login');
      }
    } catch (error) {
      toast.error("Logout failed: " + error.message);
    }
  };

  const handleSearch = (e) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      const query = `${searchQuery.trim()}${selectedCategory !== "All" ? `&category=${selectedCategory.toLowerCase()}` : ''}`;
      navigate(`/products?search=${encodeURIComponent(query)}`);
      setSearchQuery('');
    }
  };

  const handleRemoveItem = async (id) => {
    try {
      const data = await apiRequest(`http://localhost:3000/api/cart/remove/${id}`, {
        method: "DELETE"
      });
      
      if (data.success) {
        dispatch(removeFromCart(id));
        toast.success(data.message || "Item removed from cart");
      } else {
        toast.error(data.message || "Failed to remove item");
      }
    } catch (error) {
      toast.error("Something went wrong removing the item");
      console.error(error);
    }
  };

  const handleCartClick = () => {
    if (!user) {
      toast.error("Please login to view your cart");
      navigate("/login");
      return;
    }
    setShowMiniCart(!showMiniCart);
  };

  const handleCategoryChange = (category) => {
    setSelectedCategory(category);
    setShowCategories(false);
  };

  return (
    <header className={`fixed w-full z-50 top-0 transition-all duration-300 ${isDarkMode ? 'bg-gray-900' : 'bg-white'} shadow-md`}>
      {/* Top Bar - Amazon/Flipkart style */}
      <div className={`w-full ${isDarkMode ? 'bg-gray-800' : 'bg-gray-100'} py-1.5 text-xs`}>
        <div className="container mx-auto px-4 flex justify-between items-center">
          <div className="flex items-center space-x-4">
            <span className={`${isDarkMode ? 'text-gray-300' : 'text-gray-600'}`}>
              <FaTruck className="inline mr-1" /> Free shipping on orders over $50
            </span>
          </div>
          <div className="flex items-center space-x-4">
            <Link to="/products" className={`${isDarkMode ? 'text-gray-300 hover:text-white' : 'text-gray-600 hover:text-gray-900'} transition-colors duration-200`}>
              Deals
            </Link>
            <Link to="/products" className={`${isDarkMode ? 'text-gray-300 hover:text-white' : 'text-gray-600 hover:text-gray-900'} transition-colors duration-200`}>
              New Arrivals
            </Link>
            <Link to="/products" className={`${isDarkMode ? 'text-gray-300 hover:text-white' : 'text-gray-600 hover:text-gray-900'} transition-colors duration-200`}>
              Sell
            </Link>
          </div>
        </div>
      </div>

      <nav className="container mx-auto px-4 py-3">
        <div className="flex justify-between items-center">
          {/* Logo */}
          <Link 
            to="/" 
            className="text-2xl font-bold bg-gradient-to-r from-[var(--primary)] to-[var(--accent)] bg-clip-text text-transparent hover:from-[var(--primary-dark)] hover:to-[var(--accent-dark)] transition-all duration-300"
          >
            Shopping Cart
          </Link>

          {/* Modern Search Bar - Desktop */}
          <div className="hidden md:flex items-center relative max-w-lg w-full mx-4">
            <form onSubmit={handleSearch} className="w-full">
              <div className={`flex items-center rounded-lg overflow-hidden transition-all duration-300 ${
                isSearchFocused 
                  ? 'ring-2 ring-[var(--primary)] shadow-lg' 
                  : 'shadow-md'
              }`}>
                {/* Category Dropdown */}
                <div className="relative" ref={categoryRef}>
                  <button
                    type="button"
                    onClick={() => setShowCategories(!showCategories)}
                    className={`flex items-center justify-between px-3 py-2.5 text-sm font-medium transition-colors border-r ${
                      isDarkMode 
                        ? 'bg-gray-800 text-gray-200 border-gray-700 hover:bg-gray-700' 
                        : 'bg-gray-100 text-gray-700 border-gray-200 hover:bg-gray-200'
                    }`}
                  >
                    {selectedCategory}
                    {showCategories ? (
                      <FaChevronUp className="ml-2 w-3 h-3" />
                    ) : (
                      <FaChevronDown className="ml-2 w-3 h-3" />
                    )}
                  </button>
                  
                  {/* Categories Dropdown */}
                  {showCategories && (
                    <div className={`absolute top-full left-0 mt-1 w-48 z-50 rounded-md shadow-lg overflow-hidden animate-fadeIn ${
                      isDarkMode ? 'bg-gray-800' : 'bg-white'
                    }`}>
                      <ul>
                        {categories.map((category) => (
                          <li key={category.name}>
                            <button
                              type="button"
                              onClick={() => handleCategoryChange(category.name)}
                              className={`flex items-center w-full text-left px-4 py-2 text-sm transition-colors ${
                                isDarkMode 
                                  ? 'text-gray-200 hover:bg-gray-700' 
                                  : 'text-gray-700 hover:bg-gray-100'
                              } ${selectedCategory === category.name ? 'font-medium bg-opacity-10 bg-[var(--primary)]' : ''}`}
                            >
                              <span className="mr-2">{category.icon}</span>
                              {category.name}
                            </button>
                          </li>
                        ))}
                      </ul>
                    </div>
                  )}
                </div>
                
                {/* Search Input */}
                <input
                  type="text"
                  placeholder="Search products..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  onFocus={() => setIsSearchFocused(true)}
                  onBlur={() => setIsSearchFocused(false)}
                  className={`w-full py-2.5 px-4 text-base focus:outline-none transition-all duration-300 ${
                    isDarkMode 
                      ? 'bg-gray-800 text-white placeholder-gray-400' 
                      : 'bg-white text-gray-800 placeholder-gray-500'
                  }`}
                />
                
                {/* Search Button */}
                <button 
                  type="submit"
                  className={`px-4 py-2.5 flex items-center justify-center transition-all duration-300 ${
                    isDarkMode 
                      ? 'bg-[var(--primary)] text-white hover:bg-[var(--primary-dark)]' 
                      : 'bg-[var(--primary)] text-white hover:bg-[var(--primary-dark)]'
                  }`}
                >
                  <FaSearch className="mr-1" />
                  <span className="text-sm font-medium">Search</span>
                </button>
              </div>
            </form>
          </div>

          {/* Mobile menu button */}
          <button 
            className="md:hidden visible p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800 transition-colors duration-200"
            onClick={() => setIsOpen(!isOpen)}
          >
            <CiMenuBurger size={25} className={isDarkMode ? 'text-white' : 'text-gray-800'} />
          </button>

          {/* Desktop Navigation */}
          <div className="hidden md:flex items-center space-x-6">
            {/* Home Link */}
            <Link 
              to="/" 
              className={`flex flex-col items-center group relative py-2 ${
                isDarkMode ? 'text-gray-200 hover:text-white' : 'text-gray-700 hover:text-gray-900'
              }`}
              onMouseEnter={() => setActiveNavItem('home')}
              onMouseLeave={() => setActiveNavItem(null)}
            >
              <FaHome className="text-xl mb-1" />
              <span className="text-xs">Home</span>
            </Link>

            {/* Products Link */}
            <Link 
              to="/products" 
              className={`flex flex-col items-center group relative py-2 ${
                isDarkMode ? 'text-gray-200 hover:text-white' : 'text-gray-700 hover:text-gray-900'
              }`}
              onMouseEnter={() => setActiveNavItem('products')}
              onMouseLeave={() => setActiveNavItem(null)}
            >
              <FaBox className="text-xl mb-1" />
              <span className="text-xs">Products</span>
            </Link>
            
            {/* Cart Link */}
            <button
              onClick={handleCartClick}
              className={`flex flex-col items-center group relative py-2 ${
                isDarkMode ? 'text-gray-200 hover:text-white' : 'text-gray-700 hover:text-gray-900'
              }`}
            >
              <div className="relative">
                <FaShoppingCart className="text-xl mb-1 text-blue-600" />
                {cart && cart.length > 0 && (
                  <span className="absolute -top-2 -right-2 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                    {cart.length}
                  </span>
                )}
              </div>
              <span className="text-xs">Cart</span>
            </button>
            
            {/* User Menu */}
            {user ? (
              <div className="relative group">
                <button
                  className={`flex flex-col items-center py-2 ${
                    isDarkMode ? 'text-gray-200 hover:text-white' : 'text-gray-700 hover:text-gray-900'
                  }`}
                >
                  <FaUser className="text-xl mb-1" />
                  <span className="text-xs">Account</span>
                </button>
                {/* Dropdown Menu */}
                <div className="absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white dark:bg-gray-800 ring-1 ring-black ring-opacity-5 opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200">
                  <div className="py-1">
                    <Link
                      to="/profile"
                      className="block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700"
                    >
                      Profile
                    </Link>
                    <Link
                      to="/orders"
                      className="block px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700"
                    >
                      Orders
                    </Link>
                    <button
                      onClick={handleLogout}
                      className="block w-full text-left px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-700"
                    >
                      Logout
                    </button>
                  </div>
                </div>
              </div>
            ) : (
              <div className="flex items-center space-x-4">
                <Link
                  to="/login"
                  className={`flex flex-col items-center py-2 ${
                    isDarkMode ? 'text-gray-200 hover:text-white' : 'text-gray-700 hover:text-gray-900'
                  }`}
                >
                  <FaUser className="text-xl mb-1" />
                  <span className="text-xs">Login</span>
                </Link>
                <Link
                  to="/register"
                  className={`px-4 py-2 rounded-md text-sm font-medium transition-colors duration-200 ${
                    isDarkMode 
                      ? 'bg-blue-600 text-white hover:bg-blue-700' 
                      : 'bg-blue-700 text-white hover:bg-blue-800 shadow-lg hover:shadow-xl'
                  }`}
                >
                  Register
                </Link>
              </div>
            )}
            
            {/* Theme Toggle */}
            <button 
              className={`p-2 rounded-lg transition-colors duration-200 ${
                isDarkMode 
                  ? 'text-gray-200 hover:text-white hover:bg-gray-800' 
                  : 'text-gray-700 hover:text-gray-900 hover:bg-gray-100'
              }`}
              onClick={() => setIsDarkMode(!isDarkMode)}
            >
              {isDarkMode ? <CiLight className="w-5 h-5" /> : <CiDark className="w-5 h-5" />}
            </button>
          </div>
        </div>

        {/* Mobile Navigation */}
        <div 
          className={`md:hidden transition-all duration-300 ease-in-out ${
            isOpen ? 'max-h-96 opacity-100' : 'max-h-0 opacity-0 overflow-hidden'
          }`}
        >
          {/* Modern Search Bar - Mobile */}
          <div className="py-4">
            <form onSubmit={handleSearch} className="w-full">
              <div className={`flex flex-col rounded-lg overflow-hidden shadow-md ${
                isSearchFocused 
                  ? 'ring-2 ring-[var(--primary)]' 
                  : ''
              }`}>
                {/* Category Selector for Mobile */}
                <select
                  value={selectedCategory}
                  onChange={(e) => setSelectedCategory(e.target.value)}
                  className={`w-full py-2 px-3 text-sm font-medium border-b ${
                    isDarkMode 
                      ? 'bg-gray-800 text-gray-200 border-gray-700' 
                      : 'bg-gray-100 text-gray-700 border-gray-200'
                  }`}
                >
                  {categories.map((category) => (
                    <option key={category.name} value={category.name}>{category.name}</option>
                  ))}
                </select>
                
                <div className="flex items-center">
                  <input
                    type="text"
                    placeholder="Search products..."
                    value={searchQuery}
                    onChange={(e) => setSearchQuery(e.target.value)}
                    onFocus={() => setIsSearchFocused(true)}
                    onBlur={() => setIsSearchFocused(false)}
                    className={`w-full py-2.5 px-3 focus:outline-none transition-all duration-300 ${
                      isDarkMode 
                        ? 'bg-gray-800 text-white placeholder-gray-400' 
                        : 'bg-white text-gray-800 placeholder-gray-500'
                    }`}
                  />
                  <button 
                    type="submit"
                    className="bg-[var(--primary)] text-white px-4 py-2.5"
                  >
                    <FaSearch />
                  </button>
                </div>
              </div>
            </form>
          </div>

          <div className="flex flex-col space-y-4 py-4">
            <Link 
              to="/" 
              className={`flex items-center p-2 rounded-lg transition-colors duration-200 ${
                isDarkMode 
                  ? 'text-gray-200 hover:text-white hover:bg-gray-800' 
                  : 'text-gray-700 hover:text-gray-900 hover:bg-gray-100'
              }`}
              onClick={() => setIsOpen(false)}
            >
              <FaHome className="mr-2" /> Home
            </Link>
            <Link 
              to="/products" 
              className={`flex items-center p-2 rounded-lg transition-colors duration-200 ${
                isDarkMode 
                  ? 'text-gray-200 hover:text-white hover:bg-gray-800' 
                  : 'text-gray-700 hover:text-gray-900 hover:bg-gray-100'
              }`}
              onClick={() => setIsOpen(false)}
            >
              <FaBox className="mr-2" /> Products
            </Link>
            
            {user ? (
              <>
                <Link 
                  to="/wishlist" 
                  className={`flex items-center p-2 rounded-lg transition-colors duration-200 ${
                    isDarkMode 
                      ? 'text-gray-200 hover:text-white hover:bg-gray-800' 
                      : 'text-gray-700 hover:text-gray-900 hover:bg-gray-100'
                  }`}
                  onClick={() => setIsOpen(false)}
                >
                  <FaHeart className="mr-2" /> Wishlist
                </Link>
                <button 
                  onClick={() => {
                    handleLogout();
                    setIsOpen(false);
                  }}
              <div className={`